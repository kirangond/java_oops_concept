Cheat Sheet

 Earlier Java belongs to sun-microsystem and after acquired by oracle.  - James Gosling

Bitwise operator's in java
&  and
|  or
^  xor

 T & T = T
 F & T = F
 T & F = F 
 F & F = F 

 T | T = T
 F | T = T
 T | F = T
 F | F = F 

 xor 
 1 ^ 1 = 0
 1 ^ 0 = 1
 0 ^ 1 = 1
 0 ^ 0 = 0

Bitwise & 	Logical &&
false&true  - after checking false bitwise & will not check further statement	 false&&true - it will check whole statement
Execution is faster	slower
Applicable on binary and boolean values	Only boolean values

Ternary operator
 expression ?: "value1" : "value2"

 comparision
 >,<,>=,<=,!=    result always will be in Boolean values

 Class and object
 It help us to create objects whenever we send a request to class using new keyword.
 new keyword in java wherever used in program we are requesting a class to create object.

objects are created in heap memory (It's in RAM) 
OS will allocate memory to java and it divide into Seperate memory
Object address stored in reference variable
 class A{
 
 }
 
 create object
 new A(); 

  - Without main method we can't run any program

class A {
    public static void main(String[] args) {
        A a1 = new A();
        System.out.println(a1);
        
        A a2 = new A();
        System.out.println(a2);
    }
}

o/p:
A@5a07e868
A@76ed5528


Garbage Collector:

	- Helps us to remove the unused objects(without any references)
A a1 = new A();
- object address stored in reference a1 variable and it's in use

a1=null;
-reference to object is removed(memory address removed)

class A {
    public static void main(String[] args) {
        A a1 = new A();
        System.out.println(a1);
        
       a1=null;
       System.out.println(a1);
    }
}

o/p
A@5a07e868
null

The program execution follows stack 
- Main method loaded into stack.
- objects are created in heap memory.
- when main method execution done it will remove from stack memory.

Static and non-static

Static
	- Belongs to class
	- Static variable value can be changed but through-out the program remains same
	- Loaded into the class common memory
	- Accessed by classname.variable_name or directly variable name 
	- Created outside main method and inside class.

Non Static
  - Belongs to object
 - only accessed through object
	- Multiple copies created but original remains same
	- Created outside main method and inside class.

Static	 Non Static
- Accessed using class name or directly	- Only through object creating
- Memory allocated at once and value can be changed	- For each object
- Upto life of an object	- Through entire lifetime of program

- static variables value can be changed?  - yes will be able to change the value

Types of variables in java
- local variable
- static variable
- reference variable
- non static variable

main method run on it owns - built in method 
call back method(main method only we call - call back method) also run on it's own 


local variable
 - only accessed within that method 
	- Scope {} 
	- Local variable loaded into stack memory
  - variable name can be same in different method
	- Argument variable and local variable should not be same
	- Without initializing we cannot be use   int a ; //no error sysout(a); //error

void keyword will not return anything;

return; it is optional returning the control back to called method

Never write after return keyword

To return value - return value;

- keywords are written in small letters
- Class in java always starts with capital letter


Array:

 - when we create an array in java an object gets created. 
 - Array's are created to store collection of values.

 int[] a1 = new int [3]
 - It will create the object and reference a1 variable in stack and in objects there are 3 parts as we mentioned size 3

- size of each int block is 4 bytes.
- starting address+memory_size*index 
   20+4*0 = 20
   20+4*1= 24
- Values accessed in array using index number.


for(int i=0;i<3;i++) // initialization;condition;increment/decrement
       {
       System.out.println(a[i]);
       }

array need to be initialized else we will get error

int[] a; //error

int[] a = {} ; // length is 0

In built functions
  - length

  - Jdk has compiler and provide run time env for execution of program.
   JDK = Compiler + JRE

 link java with eclipse
  window - preferences - Installed JRE  
   add - standarvm - browse jdk - we need to copy till bin(exclude bin)

 for each loop - created exclusive for array's only 
 
 public class Loop {
	
	public static void main(String[] args) {
		
		int a[] = {10,20,30};
		
		for(int i:a)  //using for each loop it copy a into normal variable i
		{
			System.out.println(i);
		}
	}

}

o/p
10
20
30

Signature of main method 

public static void main(String[] args)
 - args may be anything we can use any variable name it will work 

public static void main(String[] x)

brackets can be interchanged
public static void main(String args[])

another way we represent bracket 
public static void main(String... args)

we can interchange static it will work  and if we remove either static or public it won't run - removed void give compilation error 
static public void main(String[] args)



Statements

	break;
	continue; 
	labeled break;
	
	- 

break;
 - If it hit's break statement it will come out of loop
	- none of the statements execute further break in that loop.

public class Statements {

	public static void main(String[] args) {
		
		for(int i=0;i<10;i++)
		{			
			if(i==5)
			{
				break;
			}
			System.out.println(i);
		}
		System.out.println("After break it will not execute statement");

	}

}

o/p:
0
1
2
3
4
After break it will not execute statement

continue:
 - if it hit's continue it will return control back to loop

//while it hit continue control goes back to for loop and skip.
	public static void main(String[] args) {
	
		for(int i=0;i<10;i++)
		{			
			if(i==5)
			{
				continue;
			}
			System.out.println(i);
		}
		System.out.println("It will skip the i=5");

	}

	}

o/p:
0
1
2
3
4
6
7
8
9
It will skip the i=5

break label: it will skip only if block and remain further code in for loop
- If we applied on for loop it comes out of for loop - It will comeout of for loop & execute remaining

public class breaklabel1 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		for(int i=0;i<10;i++)
		{			
			label:if(i==5)
			{
				break label;
			}
			System.out.println(i);
		}
		System.out.println("It will skip the i=5 and run remaining" );
	}

}

o/p
0
1
2
3
4
5
6
7
8
9
It will skip the i=5 and run remaining

if block
   if(true)
     execute;
  else
    execute this;

	- We can't compare number with string and you can compare float with int because both are belongs to number category
    
if else if
        if(condition satisfy)
        {
         execute this;
        }
      else if (condition satisfy)
       {
        execute this;
      }
   else
   {
  execute this;
 }


Switch 
 - break it will break out switch statement 
	- If we are not giving break statement, it will print everything
	
	
public class Switch {

	public static void main(String[] args) {
		int key = 1;
		switch (key) {
		case 1:
			System.out.println("print 100");
			break;
		case 2:
			System.out.println("print 200");
			break;
		case 3:
			System.out.println("print 300");
			break;
		default:
			System.out.println("print 400");
			break;
		}

	}

}

o/p:
print 100

while
  - 

int i = 0;
		while(i<3)
		{
			System.out.println(i);
		}
o/p
runs infinite loop

do while 

	int i=0;
    do {
		System.out.println(i);
		i++;
	} while (i<3);



for	while
You know the number of iterations in advance	You don't know the number of iterations in advance: 

	
You need to iterate over a range of values:	You need to continuously loop until a certain condition is met: 
	


Static and local variable name same - yes 
Local variable - brown color
Static - blue and italic
Local variable need to initialize compulsorly 
Static variable optional by default it will take value based on the data type
We can't print outside the method anything and variable can be write



Constructor
 -  
 - Constructor name should be same as class name.
 - Constructor are similar to method's.
 - when object is created constructor will be called. 
 - We can write constructor after main also recommended before main method
 - number of times you create the object that many times constructor being called.
 - Constructor will not return any value - Internally void while method return the value
	-  - access specifier we can write but you can't write void then it's a method.
 - Constructors will get automatically called when you create object and method will not be called when you create object you need to explicitly call the method.

- We can write main class, main method, user defined main and variable main it will not give a error

Class A
{
A()
{
Sysout("default constructor");
}

p.s.v.m(String args[])
{
  A a = new A();
}
}

o/p:
default constructor

Constructor overloading
- Same method name with different arguments - if same arguments will give error.
- whenever we create more than one constructor 

public class A1 {

	A1()
	{
		System.out.println("default constructor");
	}
	A1(int i)
	{
		System.out.println("single args:"+i);
	}
	
	A1(int i, int j)
	{
		System.out.println(i);
		System.out.println(j);
	}
	public static void main(String[] args) {
		// Constructor overloading
		
		A1 a = new A1();
		A1 a1 = new A1(100);
		A1 a2 = new A1(200,300);

	}

}

o/p:
default constructor
single args:100
200
300

- we can have same arguments with different data type.

public class A2 {

	A2(int i)
	{
		System.out.println(i);
	}
	A2(char i)
	{
		System.out.println(i);
	}
	public static void main(String[] args) {
     A2 a = new A2(100);
     A2 a1 = new A2('a');
     

	}

}

o/p:
100
a

Read inputs from keyboard
- Scanner is built in class. (you will find in jdk) - ext folder is very important in java contains the jar with all the classes.
- System.out - prints the output
- System.in - reads the inputs
- sc.next(); //non static method //reads input from the keyword - while hitting the keyboard and take only single word
- sc.nextInt(); //takes input from keyboard as a integer 
- sc.nextLine(); //takes input from keyboard as a string whole line.

public static void main(String[] args) {
	
	Scanner sc = new Scanner(System.in);
	System.out.println("Enter your name: ");
	
	String name = sc.next(); //reads input from the keyword - while hitting the keyboard and take only single word
        System.out.println(name);
        System.out.println("my name is:"+name); //string concatenation
        System.out.println("Enter your age");
        int age = sc.nextInt();
        System.out.println("my age is:"+age);
      }
o/p
Enter your name: 
kiran
kiran
my name is:kiran
Enter your age
20
my age is:20


//It will not read the sc.nextLine();

System.in - input streaming
System.out - output Streaming
Passing parameter System.in to Scanner class.

- System date - Locale
- Infinite loop 
    for(;;)

  use inbuilt method for comparision of strings
   .equals("");


 Reference variable
 1. static reference variable
 2. local  "" "" 

 data type   variable name         assignment operator value
 int             x                                    =                                     10;

 datatype for reference variable is class name 
don't store ordinary values in reference variable

 A a = new A(); //not only create object also store the object address.

Local reference variable
 - These variable are created inside the method and restricted to be used only within created method
	- address will be in hexadecimal value
	- local reference var if used without initlizing it, then it will give error.

 A a1;
 sysout(a1);

static reference variables
 - This variables created outside method and inside the class using static keyword
    Static A a = new A();
 - Static reference var having global access. 
	-  If we do not initialize static reference variable default null value is stored in it
	
	
Data types
 
 strongly typed - we should define the data type of variable and store the same data type (we can't store string in integer datatype)

        default values   Memory size 
byte  0                   1 
short 0                   2 
int   0                   4 
long     0                8         - stores number
float   0.0               4 
double    0.0             8         - stores decimal values 
char      empty           2 
boolean  false           N/A - not applicable

- varible name only $, _ (special character can be used)
- camelcase ex:rollNumber, age 
- method in camelcase and parenthesis rollNumber();
- class should starts with capital letter Bank();

static String s; //static reference variable with default value is 0

- no default values for local variables
- default values for static and non static variables

- Values are called in java literals

Var type 
 - It will not work in jdk 8, 9 and in 10 it works 
 - we can store any values in var type
   var x = 10;
   var y = 10.5f;

- we can't use variable name as keyword else it will give error

 limitation of var 
   - cannot be static, non static and argument
   - only for local variable

Maximum memory size of var and min - elastic in nature
 min size of var  = 4 bytes and maximum = 8 bytes

 Type Casting(converting one datatype to another) and wrapper class 
   - Variable type casting
   - Class casting

  upcasting - automated  (converting smaller data type to bigger data type)
  downcasting - we need to explicitly say 

downcasting (explicit down casting)
 -  what if data loss happens

NOTE: During upcasting data loss is not allowed

Unicode - 
Name the character we will have unique unicode 
 - similar to ascii values(for every alphabet there is a integer values) - compiler will convert into binary. 
   A - Z = 65 - 90
   a - z = 97 - 122 
   0 - 9 = 48 - 57 

Note : byte + byte = will return integer 
       byte * byte = will return integer

  Structure of java program
   A.java -----Unicode----> A.class----run---> o/p
   
   src - source
   bin - binary(byte code)
   
   In src folder java class present it will compile and put into bin folder
   - In eclipse when we save it will get auto complied and put into bin folder

- Whenever we create a object, Constructor should be there(default)
 - If we are creating object with no args then there is no need to explicitly write constructor - will create by default 

 
 new  (DefaultConstructor con = new DefaultConstructor();)
  - send's a request to class to create object.
  - store the address of variable in reference variable.
  - has to call the constructor.

new  keyword:
 - send requests to class to create object
	- Store the address in reference variable
	- Has to call default constructor

Setters and getters

POJO - Plain old java objects

 - we are using variable and we want to operate through method
	- No direct operating

public class A {
	String name;
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public static void main(String[] args) {
		A a = new A();
		a.setName("kiran");
		System.out.println(a.getName());
		

	}

}

o/p
kiran

this keyword
 -  - this keyword is special reference variable that hold's current object address, which is automatically created by java compiler.
 - this can't be accessed in static method
	- this keyword points to current object running in your program 
    - which ever object is in use it will associated with this keyword.
 - never access local variable using this keyword will give error(this keyword meant to access non static variable and static variable).
 - It is advised not access static variable using this keyword, however it will work.

  -call using another way calling constructor using this keyword 
     this - used to call non static variables
	 this() - used to call constructor (it will work when we call from another constructor)
	- - this keyword cannot be second statement when we calling a constructor using this() we will get error.


A a = new A();

a ----> Object <------this

limitation's of this keyword
 - never use this keyword inside static method.
 - inside static method this keyword is not added automatically.

Oops Concept:

Inheritance 
 - purpose - Reuseability
	- we can create 2 class in a single class(not recommended), but should not have both public access specifier and whichever having public that should be class name
	-  we inherit the members from the parent to child class with an intention to reuse those members


	- Without inheritance we can access members and methods of other class - by creating of object of class(not a inheritance)
- Every class in java are sub class of Object class.
	

Sequential inheritance 
 
public class A3 {
	}

public class B3 extends A3{

}

public class C3 extends B3{
}

Multiple Inheritance
 - Inheriting more than 2 parent class in child classes.
 - In java  multiple inheritance does not support.  (class A extends B, C)
 - multiple inheritance result's in complex designing of software which will make the maintainance of application complex.


Polymorphism
	 - many forms 
	 - Developing a feature in java that can take more than one form.

 2 way's to achieve polymorphism
  - Overriding
  - Overloading

Overriding 
 - Inheriting the method in child class and modifying logic of the inherited method in child class
	- Purpose -  modify logic of inherited method in child class
	- Without inheritance no overriding
	- never apply polymorphism on variables 

Parent to child relationship no vice versa

public class A {
	
	public void test()
	{
		System.out.println(100);
	}

}

public class B extends A{
        public void test()
        {
        	System.out.println(1000);
        }
	public static void main(String[] args) {
		B b = new B();
		b.test();
		
		A a  = new A();
		a.test();

	}

}

o/p:
1000
100


Annotations 
 -   
 @annotationname - set of instruction given to the compiler to perform specific set of task 
 @Override - starts with capital letter
  Instructing compiler to check same method and same number of arguments and reuse the method and modify the logic

Real world scenario:

Overloading
 -  we don't required inheritance.
	-  developing more than 1 method with same name in same class with different number of arguments or data type

public class Email {
	public void sendMail(int transactionId, String email)
	{
		System.out.println("transctional email");
	}
	
	public void sendMail(String email)
	{
		System.out.println("promotional email");
	}

	public static void main(String[] args) {
		Email e = new Email();
		e.sendMail("kirangond05@gmail.com");
		e.sendMail(10, "pavan@gmail.com");

	}

}

o/p:
promotional email
transctional email

Jar - Java archieve
 - collection of .class files 
 - putting all files and wrapping it(archieve) and putting in to .jar file 
 - reusability of logic written by someone

 download a jar and add into your project 
 
 how to convert project into jar file
  select project - export - Java(Jar file) - save 
  
 add jar to project 
 select project - properties - java build path - libraries - select file and ok 
  we will get new option Referenced libraries

2D Array

public class Array2D {

	public static void main(String[] args) {
		int a[][] = new int[2][3];
		a[0][0]=10;
		a[0][1]=12;
		a[0][2]=14;
		a[1][0]=16;
		a[1][1]=18;
		a[1][2]=20;
		System.out.println(a.length); //will give row length
		System.out.println(a[0].length); //will give column length it should be less than total number of rows
        System.out.println(a.length*a[0].length);
		 for (int i = 0; i < a.length; i++) {
			for (int j = 0; j < a[0].length; j++) {
				System.out.println(a[i][j]);
			}
		}
	}

}

o/p:
2
3
6
10
12
14
16
18
20

 - Packages
    folders - to store programs in organized manner
    resolves Naming convention problem(we can create same file name in different folders)
    write in lower case (we can write in upper but use lower) and we can't give keywords name 	

package com.package1;
public class A {

}

	
package com.package2;
public class B {

}

Import packagename.classname

- import keyword used to access class var/member which is present in other package.
- import should be top most keyword in java
- want to access within the same package import not recommended.

Package is top most keyword in class and then import if we are importing anything

Regular expression - import com.package1.* -  import everything from package package1 

If we want to access from same package class then not required

Access Specifier 
  - - access specifier applied on class members to provide security

  private
  default
  protected
  public 

	Private	default	protected	public
In same class	 Y	Y	Y	Y
Same package sub-class	N	Y	Y	Y
Same package non sub-class	N	Y	Y	Y
different package sub-class	N	N	Y	Y
different package non sub-class	N	N	N	Y


  private
   - private members only accessed in same class.


Default
  - same package outside the package not accessible

Proected
 -    accessible in same class, same package and different package only through inheritance

Public
  -accessible throughout the project

Access specifier for constructor
  
Private : if constructor is made private then it's object can be created in same class

Default:
Object created in same class and same package

Protected:
   same as default

Public:
 objects created any where 

Note: constructor never inherited

A class can be default or public never private or protected

Encapsulation
 - wrapping of variable inside the method so direct access to the variable not allowed.
	- variable need to private.
    -  using getters and setters we access the variable because methods are public.

public class A {
	
	private String name;

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}
	

}


public class B {
	
	public static void main(String[] args)
	{
		A a = new A();
		//System.out.println(a.name); // can't access private variable outside the class
	   a.setName("kiran");
	   System.out.println(a.getName());
	}

}

O/P:
Kiran

Inheritance - part 2

- Every class in java are sub class of Object class.

super keyword
 - used to access the members of parent class.
	- without inheritance super keyword cannot be used.
	- super keyword cannot be used in static method.
	- both parent static and non static members can be access in child class using super keyword.
	- We can call constructor of super class using super keyword.

public class A1 {
	
	int i = 10;
	static int j = 20;
	
	public void test1()
	{
		System.out.println("non static method: ");
	}
	
	public static void test2()
	{
		System.out.println("static method: ");
	}

}


package com.superkeyword;

public class B2 extends A1{

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		B2 b = new B2();
	//	System.out.println(super.i); // cannot use super in static method
		b.test();
		

	}

	private void test() {
		// TODO Auto-generated method stub
		System.out.println(super.i);
		System.out.println(super.j);
		super.test1();
		super.test2();
	}

}

o/p:
10
20
non static method: 
static method: 


Note: super keyword is automatically placed by JVM in child class without no args constructor

public class A3 {
	
	A3()
	{
		System.out.println("parent constructor");
	}

}

public class B3 extends A3{

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		B3 b = new B3();
		
	}

	B3() {
		// TODO Auto-generated method stub
		super();
		
	}

}

o/p:
parent constructor

Constructor never inherited

	- By default empty default constructor added and empty super keyword added
    - super keyword cannot be second statement in child constructor while accessing parent constructor 
 - for accessing variables and methods can be second statement

this	super
Accessing members of same class	Accessing members of parent class
	

  - super and this cannot be used in same constructor because both keywords need to be first statement
  
Interfaces
 - Incomplete method (no implementaions)
 - abstraction achieved using interface
	- Interface are 100% incomplete or abstract in nature
	- We use implements keyword to inherit methods from parent interface 
	- Variables should be static and final (interface A { int i=10;})  //by default static and final

    - abstract keyword help us to define method is in-complete.
 -  usage of abstract to create incomplete method is optional 
	- By default abstract added 

	- Class consists of complete method 

public interface A {
	
	public void test();

}

public class B implements A{

	@Override
	public void test()
	{
		System.out.println(500);
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		B b = new B();
		b.test();
		

	}

	

}

o/p:
500

public interface A2 {
	
	public void test();
	public abstract void test1();
	abstract public void test2();
	

}

Class --- > class = extends keyword
Interface ---> class = implements keyword
Interface ---> interface = extends keyword 

 interface supports multiple inheritance -- yes

Interface A
{
}

Interface B extends A
{

}

Interface C extends A, B
{
}


Class can implement multiple inheritance

Class D implements A, B, C
{
}

Can class extends another class and implements interface at same time - yes
Order squence important - first extends then implements 

Abstraction:
 - hiding of implementation details
 - In java we achieve abstraction using interface and abstract class

Why to use interface ? For good design of software

	- Unimplemented methods used in child class 


Final keyword
 - variable, method and class

Constant 
  - value remains same
  - reinitialize not possible

final int i = 10;
i=100; //error

If variable made final reinitialize of variable is not possible.
	- If static and non static variable made final then initlaization that variable is mandtory
	- Final on method we can't override that method.
	- If class made final then inheritance of class not possible


Marker interface:
  - an empty interface consists nothing in it

interface A
{

}

-lambda expression
   - alternate way to complete incomplete method from interface to class.
   - from java 8 onwards 

interface A
{
    public void test();
}

class HelloWorld {
    public static void main(String[] args) {
        A a = () -> System.out.println("100");
        a.test();
    }
}

o/p:
100

Insert multiple statements in it

Public class B
{

A a = () ->
{
Sysout("100");
Sysut("200");
}
a.test();
}

o/p:
100
200


If having arguments in it

Interface A
{
Public void test(int x);
}

Public class B
{
p.s.v.m()
{
   A a = (int x) ->
{
Sysout("100");
Sysut("200");

}
a.test();
}
}

o/p:
100
200



}





 




